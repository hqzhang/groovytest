//////

def brch= scm.branches.toString().substring(3,9)
library("groovytest-shared-lib@$brch") _
println "------branch=${brch}"
def wksp
def jobstr
def build_no
node {
    wksp = env.WORKSPACE
    jobstr= env.JOB_NAME
    build_no=env.BUILD_NUMBER
}
println "wksp=$workspace"

def repo=scm.getUserRemoteConfigs().toString()

repo=repo.substring(9, repo.length()-12).split('\\/')[4]
println "------repo=$repo"


//def jobstr = Thread.currentThread().toString().substring(38,).split('/')[0]
//println "------jobstr=$jobstr"
println "call getFileList"
println menu.getFileList('solution',"$wksp") 
println "call getContent100"
println menu.getContent100('SolutionDetail' ,"$wksp","$repo","$brch" )
println "begin properties"
//////
properties([
    pipelineTriggers([githubPush()]),
    parameters([
            choice( name: 'Soltail', description: '', choices: [ "$brch","$jobstr","$repo"] ),
           /*extendedChoice(
              name: 'SolutionDetail',
              description: '',
              visibleItemCount: 50,
              multiSelectDelimiter: ',',
              type: 'PT_SINGLE_SELECT',
              groovyScript: menu.getFileDefault('solution') ),*/
            choice( name: 'SolutionDetail', description: '', choices: menu.getFileList('solution',"$wksp") ),
            /*[$class: 'ChoiceParameter', choiceType: 'PT_SINGLE_SELECT', filterLength: 1, 
              filterable: false, name: 'SolutionDetail', randomName: 'choice-parameter-242872671984832',
               script: [$class: 'GroovyScript', fallbackScript: [classpath: [], oldScript: '', sandbox: false, script: ''], 
               script: [classpath: [], oldScript: '', sandbox: false, script: menu.getFileList('solution') ]]],*/
            [$class: 'DynamicReferenceParameter', choiceType: 'ET_FORMATTED_HTML', name: 'CONFIG', omitValueField: false, 
            randomName: 'choice-parameter-138673186839723', referencedParameters: 'SolutionDetail', 
            script: [$class: 'GroovyScript', fallbackScript: [classpath: [], oldScript: '', sandbox: false, script: ''],
                     script: [classpath: [], oldScript: '', sandbox: false, 
                              script: menu.getContent100('SolutionDetail' ,"$wksp","$repo","$brch" )]] ],

            string(name: 'filebackup', defaultValue: 'backup.yaml', description: 'A payload from github webhook'),
             
])
])
println "begin pipeline"
def map
def list
pipeline {
    agent any
    stages {
        stage('Create List') {
            steps {
                script {
                    echo "STAGE: create List..."
                    echo "params=$params"
                    echo "parsing yaml"
                    println env.CONFIG 
                    if ( env.CONFIG == '' ){
                        echo "CONFIG is not SET"
                        sh 'exit 1'
                    }
                    ///println for yaml string
                    //def multiLineStr = params.CONFIG.replaceAll(/\\n/,"\n").replaceAll(',','')
                    println "for comma string"
                    def read = menu.stringParse(env.CONFIG)
                    println read
                    /*
                    writeYaml file: "releases/${filebackup}", data: read
                    //writeFile file: "releases/${filebackup}", text: multiLineStr
                    sh "cat releases/${filebackup}"*/
                   
                    
                    
                    /*def targtServer=params.servers
                    echo "params=$params"
                    if ( targtServer.equals('ERROR') ) 
                    {
                        targtServer='s23'
                    }
                    
                    echo "targtServer=$targtServer"
                    workspace=WORKSPACE
                    println "WS=${env.WORKSPACE}"
                    println "WS=${WORKSPACE}"
                    println "pwd="+pwd()
                    println "workspace=$workspace"
                    // you may create your list here, lets say reading from a file after checkout
                    //list = ["Test-1", "Test-2", "Test-3", "Test-4", "Test-5"]
                    list = readXMLList("${workspace}/manifest_Lynx.xml")
                    echo "***************"
                    def jsonText = parseXML("${workspace}/manifest_Lynx.xml")
                    map = readJSON text: jsonText
                    echo "#################"
                     def remote = [:]
                    remote.name = 'test'
                    remote.host = '192.168.2.27'
                    remote.user = 'root'
                    remote.password = 'password'
                    remote.allowAnyHosts = true
    
                    sshCommand remote: remote, command: "ls -lrt"*/
    
                }
            }
        }
   }
}


