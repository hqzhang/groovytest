#!/usr/bin/env groovy
library("my-shared-library@master") _
println( cons.envList )
String buildScriptDefault(List values,String key){
    values.eachWithIndex{ it,index->
        if ( it == key ) {
            values[index] = it+":selected"
        }
    }
    buildScript(values)
}
List category_list = ["Select","Vegetables","Fruits"].collect{'"'+it+'"'}
List fruits_list = ["Select","apple","banana","mango"].collect{'"'+it+'"'} 
List vegetables_list = ["Select","potato","tomato","broccoli"].collect{'"'+it+'"'} 
List default_item = ["Not Applicable"].collect{'"'+it+'"'}

String categories = buildScriptDefault(category_list,"Fruits")
String vegetables = buildScriptDefault(vegetables_list,"banana")
String fruits = buildScriptDefault(fruits_list,"tomato")
String items = populateItems(default_item,vegetables_list,fruits_list)
categories=buildScriptDefault( cons.envList, 'BAT')
// Methods to build groovy scripts to populate data
String buildScript(List values){
  return "return $values"
}
String populateItems(List default_item, List vegetablesList, List fruitsList){
return """if(Categories.equals('Vegetables')){
         return $vegetablesList
     }
     else if(Categories.equals('Fruits')){
         return $fruitsList
     }else{
         return $default_item
     }
     """
}
// Properties step to set the Active choice parameters via 
// Declarative Scripting
properties([
    parameters([
        [$class: 'ChoiceParameter', choiceType: 'PT_SINGLE_SELECT',   
          name: 'Categories', script: [$class: 'GroovyScript', 
          fallbackScript: [classpath: [], sandbox: false, 
          script: 'return ["ERROR"]'], script: [classpath: [], sandbox: false,
          script:  categories]]],
        [$class: 'CascadeChoiceParameter', choiceType: 'PT_SINGLE_SELECT',
          name: 'Items', referencedParameters: 'Categories', 
          script: [$class: 'GroovyScript', fallbackScript: [classpath: [], sandbox: false, 
          script: 'return ["error"]'], script: [classpath: [], sandbox: false, script: items]]]
    ])
])
pipeline {
    agent any
stages {
   stage('Build'){
    steps {
       echo 'Building..'
      }
    }
   }
}
