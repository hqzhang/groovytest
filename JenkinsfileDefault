#!/usr/bin/env groovy
library("my-shared-library@master") _
println( cons.envList )
String buildScript(List values){
  def ret=values.collect { '"'+it+'"' }
  return "return ${ret}"
}
String buildScriptDefault(List values,String key){
    values.eachWithIndex{ it,index->
        if ( it == key ) {
            values[index] = it+":selected"
        }
    }
    buildScript(values)
}
List category_list = ["Vegetables","Fruits"]
List fruits_list = ["Select","apple","banana","mango"]
List vegetables_list = ["Select","potato","tomato","broccoli"]
List default_item = ["Not Applicable"]

List Fruits=[]
String categories = buildScriptDefault(category_list,"Fruits")
String Fruits[0] = buildScriptDefault(vegetables_list,"banana")
String Fruits[1] = buildScriptDefault(fruits_list,"tomato")
String items = populateItems(Fruits)
//categories=buildScriptDefault( cons.envList, 'BAT')

// Methods to build groovy scripts to populate data

String populateItems(List Fruits){
    def ret=''
    cons.envList.eachWithIndex{ it,index->
            String myList = buildScript(Fruits[index])
            String myStr ="if(${myenv}.equals('$it')){ $myList }"+"\n"
            if ( !ret?.trim() ) {  ret += myStr }
            else { ret += "else "+myStr }
    }
    ret += """else{  return ["Not QApplicable"] }"""
    return "$ret"
}

// Properties step to set the Active choice parameters via 
// Declarative Scripting
properties([
    parameters([
        [$class: 'ChoiceParameter', choiceType: 'PT_SINGLE_SELECT',   
          name: 'Categories', script: [$class: 'GroovyScript', 
          fallbackScript: [classpath: [], sandbox: false, 
          script: 'return ["ERROR"]'], script: [classpath: [], sandbox: false,
          script:  categories]]],
        [$class: 'CascadeChoiceParameter', choiceType: 'PT_SINGLE_SELECT',
          name: 'Items', referencedParameters: 'Categories', 
          script: [$class: 'GroovyScript', fallbackScript: [classpath: [], sandbox: false, 
          script: 'return ["error"]'], script: [classpath: [], sandbox: false, script: items]]]
    ])
])
pipeline {
    agent any
stages {
   stage('Build'){
    steps {
       echo 'Building..'
      }
    }
   }
}
