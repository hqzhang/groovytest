#!/usr/bin/env groovy
library("my-shared-library@master") _

// Properties step to set the Active choice parameters via 


properties([
    parameters([
        choice(name: 'Environment', choices: cons.envir, description: 'input cluster'),
        [$class: 'CascadeChoiceParameter', choiceType: 'PT_SINGLE_SELECT',
          name: 'targtServer', referencedParameters: 'Environment', 
          script: [$class: 'GroovyScript', 
                   fallbackScript: [classpath: [], sandbox: false, 
                                     script: 'return ["error"]'], 
          script: [classpath: [], sandbox: false, 
                    script: cons.selectServers('Environment')]]],

        [$class: 'ChoiceParameter', choiceType: 'PT_SINGLE_SELECT',  
          name: 'MyEnvir', 
          script: [$class: 'GroovyScript', 
          fallbackScript: [classpath: [], sandbox: false, script: 'return ["ERROR"]'], 
                          script: [classpath: [], sandbox: false,
                          script:  cons.buildScript()]]],
        
        extendedChoice( 
            name: 'TagName', 
            //defaultValue: 'test2', 
            description: 'tag name', 
            type: 'PT_SINGLE_SELECT',
            defaultGroovyScript: """def gettags = ("git ls-remote --refs --tags  git@github.com:hqzhang/octest.git").execute()
               return gettags.text.readLines().collect { it.split()[1].replaceAll('refs/tags/', '') }[2]
                          """,
            groovyScript: """def gettags = ("git ls-remote --refs --tags  git@github.com:hqzhang/octest.git  ").execute()
               return gettags.text.readLines().collect { it.split()[1].replaceAll('refs/tags/', '') }
                          """,),
        extendedChoice(
            name: 'myBranches',
            description: 'branch name',
            visibleItemCount: 50,
            multiSelectDelimiter: ',',
            type: 'PT_SINGLE_SELECT',
            groovyScript: """def gettags = ("git ls-remote --heads  git@github.com:hqzhang/octest.git  ").execute()
               return gettags.text.readLines().collect { it.split()[1].replaceAll('refs/tags/', '') }'''
                  """,),
                 
              
    ])
])
pipeline {
    agent any
stages {
   stage('Build'){
    steps {
       echo 'Building..'
      }
    }
   }
}
