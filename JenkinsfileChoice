#!/usr/bin/env groovy
library("my-shared-library@master") _
// Define variables

//List category_list = cons.envir.collect{ '"' + it + '"'}
List fruits_list = cons.servers['DEV']['APP'].collect{ '"' + it + '"'}
List vegetables_list = cons.servers['QA']['APP'].collect{ '"' + it + '"'}
List default_item = ["\"Not Applicable\""]

//String categories = buildScript(category_list)
String items = populateItems(vegetables_list,vegetables_list,fruits_list)
// Methods to build groovy scripts to populate data
//String buildScript(List values){
//  return "return $values"
//}
String populateItems(List default_item, List vegetablesList, List fruitsList){
def my=''
def your=''
return """if(Categories.equals('DEV')){
     return $vegetablesList
     }
     else if(Categories.equals('QA')){
     return $fruitsList
     }else{
     return ["default_item"]
     }
     """
}
// Properties step to set the Active choice parameters via 
// Declarative Scripting
properties([
    parameters([
        choice(name: 'Categories', choices: cons.envir, description: 'input cluster'),
        //[$class: 'ChoiceParameter', choiceType: 'PT_SINGLE_SELECT',   name: 'Categories', 
        //script: [$class: 'GroovyScript', fallbackScript: [classpath: [], sandbox: false, script: 'return ["ERROR"]'], script: [classpath: [], sandbox: false,
        //script:  categories]]],
       [$class: 'CascadeChoiceParameter', choiceType: 'PT_SINGLE_SELECT',name: 'Items', referencedParameters: 'Categories', 
          script: [$class: 'GroovyScript', fallbackScript: [classpath: [], sandbox: false, script: 'return ["error"]'], 
              script: [classpath: [], sandbox: false, script: items]]]
    ])
])
pipeline {
    agent any
stages {
   stage('Build'){
    steps {
       echo 'Building..'
      }
    }
   }
}
